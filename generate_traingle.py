#!/usr/bin/python3.6
"""
A program to generate traingle and right traingle dataset
"""
from numpy.random import randint
import csv

# local python import
from utils import EXP6_RT_FILE_NAMES, EXP6_T_FILE_NAMES
from utils import RT_LABELS, T_LABELS


def check_triangle(a, b, c):
    """The sum of the lengths of any two sides of a triangle is greater than
    the length of the third side.
    """
    if a + b > c and b + c > a and a + c > b:
        return 1
    return 0


def check_right_triangle(a, b, c):
    """Pythagoras theorm."""
    if a**2 + b**2 == c**2 or \
            a**2 + c**2 == b**2 or \
            c**2 + b**2 == a**2:
        return 1

    return 0


def create_triangle_datasets():
    """Create normal triangle datasets."""

    for i in range(len(EXP6_T_FILE_NAMES)):
        FP = open(EXP6_T_FILE_NAMES[i], 'w')
        FILE_WRITER = csv.writer(
            FP, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL
        )
        FILE_WRITER.writerow(T_LABELS[i])

        for j in range(1000):
            a = randint(100000)
            b = randint(100000)
            c = randint(100000)
            validity = check_triangle(a, b, c)

            if i == 0:
                attributes = [a, b, c, validity]
            elif i == 1:
                attributes = [a, b, c, a + b, a + c, b + c, validity]
            else:
                attributes = [a + b, a + c, b + c, validity]

            FILE_WRITER.writerow(attributes)

        FP.close()


def create_rt_datasets():
    """Create right angle triangle datasets."""
    for i in range(len(EXP6_RT_FILE_NAMES)):
        FP = open(EXP6_RT_FILE_NAMES[i], 'w')
        FILE_WRITER = csv.writer(
            FP, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL
        )
        FILE_WRITER.writerow(RT_LABELS[i])

        for j in range(1000):
            x = randint(100)

            # If n is odd, then n, (n**2-1)/2, (n**2+1)/2 is a right triangle.
            if x % 2 == 1:
                y = (x**2 - 1) / 2
                z = (x**2 + 1) / 2

            # If n is even, then n, (n**2/4)-1, (n**2/4)+1 is a right triangle.
            else:
                y = (x**2 / 4) - 1
                z = (x**2 / 4) + 1

            """
            1. To avoid classifier identifying an order of the values (eg: a < b < c),
            Values are assigned to labels in a random manner to make the data unordered.
            2. Right angled triangles are multiplied with constants such that
            the difference between two sides should not be a constant.
            3. Non right angled triangles are generated by adding constant value
            to the sides or multiplying and adding sides with the constant.
            """
            rand = randint(4)
            const = randint(99)
            if rand == 1:
                a, b, c = const * x, const * y, const * z
            elif rand == 2:
                a, b, c = const * y, const * x, const * z
            elif rand == 3:
                a, b, c = y + const, x + const, z + const
            else:
                a, b, c = z + (const * y), y + (const * x), x + (const * z)

            validity = check_right_triangle(a, b, c)

            # Assign attributes based on the LABELS
            if i == 0:
                attributes = [a, b, c, validity]
            elif i == 1:
                attributes = [a, b, c, a**2, b**2, c**2, validity]
            elif i == 2:
                attributes = [a**2, b**2, c**2, validity]
            elif i == 3:
                attributes = [a + b, a + c, b + c, validity]
            else:
                attributes = [a**2 + b**2, a**2 + c**2, b**2 + c**2, validity]

            FILE_WRITER.writerow(attributes)

        FP.close()


def main():
    """Main function."""
    create_triangle_datasets()
    create_rt_datasets()


if __name__ == "__main__":
    main()
