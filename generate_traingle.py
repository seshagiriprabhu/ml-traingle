#!/usr/bin/python3.6
"""
A program to generate traingle and right traingle dataset
"""
from numpy.random import randint
import csv

# local python import
from utils import EXP7_T_FILE_NAMES as EXP_T_FILE_NAMES
from utils import EXP7_RT_FILE_NAMES as EXP_RT_FILE_NAMES
from utils import RT_LABELS, T_LABELS


def check_triangle(a, b, c):
    """The sum of the lengths of any two sides of a triangle is greater than
    the length of the third side.
    """
    if a + b > c and b + c > a and a + c > b:
        return 1
    return 0


def check_right_triangle(a, b, c):
    """Pythagoras theorm."""
    if a**2 + b**2 == c**2 or \
            a**2 + c**2 == b**2 or \
            c**2 + b**2 == a**2:
        return 1

    return 0


def shuffle(a, b, c):
    rand = randint(3)
    if rand == 0:
        return a, b, c
    elif rand == 1:
        return c, a, b
    else:
        return b, c, a


def create_triangle_datasets():
    """Create normal triangle datasets.

    t_dataset1 - (a, b, c, validity)
    t_dataset2 - (a, b, c, a + b, a + c, b + c, validity)
    t_dataset3 - (a + b, a + b, b + c, validity)
    """

    # File pointer for the first triangle dataset
    FP1 = open(EXP_T_FILE_NAMES[0], 'w')
    FILE_WRITER1 = csv.writer(
        FP1, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL
    )
    FILE_WRITER1.writerow(T_LABELS[0])

    # File pointer for the second triangle dataset
    FP2 = open(EXP_T_FILE_NAMES[1], 'w')
    FILE_WRITER2 = csv.writer(
        FP2, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL
    )
    FILE_WRITER2.writerow(T_LABELS[1])

    # File pointer for third triangle dataset
    FP3 = open(EXP_T_FILE_NAMES[2], 'w')
    FILE_WRITER3 = csv.writer(
        FP3, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL
    )
    FILE_WRITER3.writerow(T_LABELS[2])

    for j in range(1000):
        a = randint(100000)
        b = randint(100000)
        c = randint(100000)
        validity = check_triangle(a, b, c)

        attributes1 = [a, b, c, validity]
        FILE_WRITER1.writerow(attributes1)

        attributes2 = [a, b, c, a + b, a + c, b + c, validity]
        FILE_WRITER2.writerow(attributes2)

        attributes3 = [a + b, a + c, b + c, validity]
        FILE_WRITER3.writerow(attributes3)

    FP1.close()
    FP2.close()
    FP3.close()


def create_rt_datasets():
    """Create right angle triangle datasets."""

    # File pointer for RT dataset 1
    FP1 = open(EXP_RT_FILE_NAMES[0], 'w')
    FILE_WRITER1 = csv.writer(
        FP1, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL
    )
    FILE_WRITER1.writerow(RT_LABELS[0])

    # File pointer for RT dataset 2
    FP2 = open(EXP_RT_FILE_NAMES[1], 'w')
    FILE_WRITER2 = csv.writer(
        FP2, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL
    )
    FILE_WRITER2.writerow(RT_LABELS[1])

    # File pointer for RT dataset 3
    FP3 = open(EXP_RT_FILE_NAMES[2], 'w')
    FILE_WRITER3 = csv.writer(
        FP3, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL
    )
    FILE_WRITER3.writerow(RT_LABELS[2])

    # File pointer for RT dataset 4
    FP4 = open(EXP_RT_FILE_NAMES[3], 'w')
    FILE_WRITER4 = csv.writer(
        FP4, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL
    )
    FILE_WRITER4.writerow(RT_LABELS[3])

    # File pointer for RT dataset 5
    FP5 = open(EXP_RT_FILE_NAMES[4], 'w')
    FILE_WRITER5 = csv.writer(
        FP5, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL
    )
    FILE_WRITER5.writerow(RT_LABELS[4])

    # File pointer for RT dataset 6
    FP6 = open(EXP_RT_FILE_NAMES[5], 'w')
    FILE_WRITER6 = csv.writer(
        FP6, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL
    )
    FILE_WRITER6.writerow(RT_LABELS[5])

    for j in range(1000):
        x = randint(100)

        # If n is odd, then n, (n**2-1)/2, (n**2+1)/2 is a right triangle.
        if x % 2 == 1:
            y = (x**2 - 1) / 2
            z = (x**2 + 1) / 2

        # If n is even, then n, (n**2/4)-1, (n**2/4)+1 is a right triangle.
        else:
            y = (x**2 / 4) - 1
            z = (x**2 / 4) + 1

        """
        1. To avoid classifier identifying an order of the values (eg: a < b < c),
          Values are assigned to labels in a random manner to make the data unordered.
        2. Right angled triangles are multiplied with constants such that
          the difference between two sides should not be a constant.
        3. Non right angled triangles are generated by adding constant value
          to the sides or multiplying and adding sides with the constant.
        """
        x, y, z = shuffle(x, y, z)
        rand = randint(2)
        const = randint(99)

        if rand == 0:
            a, b, c = const * x, const * y, const * z
        else:
            a, b, c = const + const * x, const + const * y, const + const * z

        validity = check_right_triangle(a, b, c)

        # Assign attributes based on the LABELS
        attributes1 = [a, b, c, validity]
        attributes2 = [a, b, c, a**2, b**2, c**2, validity]
        attributes3 = [a**2, b**2, c**2, validity]
        attributes4 = [a + b, a + c, b + c, validity]
        attributes5 = [a**2 + b**2, a**2 + c**2, b**2 + c**2, validity]
        attributes6 = [
            a**2, b**2, c**2, a**2 + b**2,
            a**2 + c**2, b**2 + c**2, validity
        ]

        FILE_WRITER1.writerow(attributes1)
        FILE_WRITER2.writerow(attributes2)
        FILE_WRITER3.writerow(attributes3)
        FILE_WRITER4.writerow(attributes4)
        FILE_WRITER5.writerow(attributes5)
        FILE_WRITER6.writerow(attributes6)

    FP1.close()
    FP2.close()
    FP3.close()
    FP4.close()
    FP5.close()
    FP6.close()


def main():
    """Main function."""
    create_triangle_datasets()
    create_rt_datasets()


if __name__ == "__main__":
    main()
